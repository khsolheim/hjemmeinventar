generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String            @id @default(cuid())
  email         String            @unique
  name          String?
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  password      String?
  accounts      Account[]
  activities    Activity[]
  households    HouseholdMember[]
  items         Item[]
  itemRelations ItemRelation[]
  labelSizes    LabelSize[]
  loans         Loan[]
  locations     Location[]
  printers      Printer[]
  printJobs     PrintJob[]
  sessions      Session[]
  tags          Tag[]
  yarnPatterns  YarnPattern[]
  yarnProjects  YarnProject[]
  labelTemplates LabelTemplate[]
}

model Location {
  id            String             @id @default(cuid())
  name          String
  description   String?
  type          LocationType
  qrCode        String             @unique
  parentId      String?
  userId        String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  activities    Activity[]
  items         Item[]
  distributions ItemDistribution[]
  parent        Location?          @relation("LocationHierarchy", fields: [parentId], references: [id])
  children      Location[]         @relation("LocationHierarchy")
  printJobs     PrintJob[]
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([parentId])
  @@index([qrCode])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String?
  fieldSchema Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       Item[]
}

model Item {
  id                String             @id @default(cuid())
  name              String
  totalQuantity     Int                @default(1)
  availableQuantity Decimal            @default(0)
  consumedQuantity  Decimal            @default(0)
  unit              String             @default("stk")
  description       String?
  imageUrl          String?
  purchaseDate      DateTime?
  expiryDate        DateTime?
  price             Decimal?           @db.Decimal(10, 2)
  barcode           String?
  brand             String?
  categoryData      Json?
  userId            String
  categoryId        String?
  locationId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  activities        Activity[]
  attachments       Attachment[]
  category          Category?          @relation(fields: [categoryId], references: [id])
  location          Location           @relation(fields: [locationId], references: [id])
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  distributions     ItemDistribution[]
  itemRelationsFrom ItemRelation[]     @relation("ItemRelationsFrom")
  itemRelationsTo   ItemRelation[]     @relation("ItemRelationsTo")
  loan              Loan?
  printJobs         PrintJob[]
  projectUsage      ProjectYarnUsage[]
  Item_A            Item[]             @relation("ItemRelations")
  Item_B            Item[]             @relation("ItemRelations")
  tags              Tag[]              @relation("ItemTags")

  @@index([userId])
  @@index([categoryId])
  @@index([locationId])
  @@index([expiryDate])
  @@index([barcode])
  @@index([availableQuantity])
}

model ItemDistribution {
  id          String              @id @default(cuid())
  quantity    Decimal
  notes       String?
  purpose     DistributionPurpose @default(STORAGE)
  reservedFor String?
  displayInfo Json?
  itemId      String
  locationId  String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  item        Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  location    Location            @relation(fields: [locationId], references: [id])

  @@index([itemId])
  @@index([locationId])
}

model ItemRelation {
  id           String       @id @default(cuid())
  relationType RelationType
  fromItemId   String
  toItemId     String
  userId       String
  createdAt    DateTime     @default(now())
  fromItem     Item         @relation("ItemRelationsFrom", fields: [fromItemId], references: [id], onDelete: Cascade)
  toItem       Item         @relation("ItemRelationsTo", fields: [toItemId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fromItemId, toItemId, relationType])
  @@index([fromItemId])
  @@index([toItemId])
  @@index([userId])
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?
  userId      String
  itemId      String?
  locationId  String?
  createdAt   DateTime     @default(now())
  item        Item?        @relation(fields: [itemId], references: [id])
  location    Location?    @relation(fields: [locationId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Household {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     HouseholdMember[]
  labelTemplates LabelTemplate[]
}

model HouseholdMember {
  id          String        @id @default(cuid())
  role        HouseholdRole @default(MEMBER)
  userId      String
  householdId String
  joinedAt    DateTime      @default(now())
  household   Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, householdId])
}

model YarnPattern {
  id             String             @id @default(cuid())
  name           String
  description    String?
  patternFileUrl String?
  imageUrls      String[]
  difficulty     PatternDifficulty?
  estimatedTime  String?
  needleSize     String?
  gauge          String?
  yarnWeight     String?
  yarnAmount     String?
  userId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects       YarnProject[]

  @@index([userId])
}

model YarnProject {
  id             String             @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus      @default(PLANNED)
  progressImages String[]
  finalImages    String[]
  notes          String?
  startDate      DateTime?
  completedDate  DateTime?
  patternId      String?
  userId         String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  yarnUsage      ProjectYarnUsage[]
  pattern        YarnPattern?       @relation(fields: [patternId], references: [id])
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model ProjectYarnUsage {
  id           String      @id @default(cuid())
  quantityUsed Decimal
  notes        String?
  projectId    String
  itemId       String
  createdAt    DateTime    @default(now())
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  project      YarnProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, itemId])
}

model Loan {
  id                 String     @id @default(cuid())
  loanedTo           String
  contactInfo        String?
  loanDate           DateTime   @default(now())
  expectedReturnDate DateTime?
  actualReturnDate   DateTime?
  notes              String?
  status             LoanStatus @default(OUT)
  itemId             String     @unique
  userId             String
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  item               Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([expectedReturnDate])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6B7280")
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     Item[]   @relation("ItemTags")

  @@unique([name, userId])
  @@index([userId])
}

model Attachment {
  id        String         @id @default(cuid())
  url       String
  filename  String
  filetype  String
  filesize  Int
  type      AttachmentType @default(OTHER)
  itemId    String
  createdAt DateTime       @default(now())
  item      Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([type])
}

model LabelSize {
  id          String   @id @default(cuid())
  name        String
  width       Int
  height      Int
  widthMm     Int
  heightMm    Int
  description String?
  isDefault   Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
}

model LabelTemplate {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  type                LabelType
  size                LabelSizeType
  width               String?             // Bredde i mm
  height              String?             // Høyde i mm
  orientation         String?             // Orientering: landscape/portrait
  category            String?
  xml                 String
  fieldMapping        String?
  thumbnail           String?
  isVisualTemplate    Boolean             @default(false)  // Om det er laget med visuell editor
  visualElements      Json?               // JSON data for visuelle elementer
  isSystemDefault     Boolean             @default(false)
  usageCount          Int                 @default(0)
  lastUsedAt          DateTime?
  version             Int                 @default(1)
  locale              String              @default("nb-NO")
  textDirection       String              @default("ltr")
  parentTemplateId    String?
  inheritanceLevel    Int                 @default(0)
  overriddenFields    String?
  complexity          TemplateComplexity  @default(SIMPLE)
  estimatedRenderTime Int                 @default(100)
  labelMediaId        String?
  userId              String?
  householdId         String?
  tenantId            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           String?
  updatedBy           String?
  deletedAt           DateTime?
  deletedBy           String?

  // Relationships
  parentTemplate      LabelTemplate?      @relation("TemplateInheritance", fields: [parentTemplateId], references: [id])
  childTemplates      LabelTemplate[]     @relation("TemplateInheritance")
  labelMedia          LabelMedia?         @relation(fields: [labelMediaId], references: [id])
  user                User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  household           Household?          @relation(fields: [householdId], references: [id], onDelete: Cascade)
  printJobs           PrintJob[]          @relation("TemplatePrintJobs")

  @@index([userId])
  @@index([type, isSystemDefault])
  @@index([category, usageCount])
  @@index([parentTemplateId, inheritanceLevel])
}

model LabelMedia {
  id                String          @id @default(cuid())
  code              String
  dymoId            String
  paperName         String
  size              LabelSizeType
  widthMm           Float?
  heightMm          Float?
  isActive          Boolean         @default(true)
  supportedPrinters String?
  costPerLabel      Float           @default(0.0000)
  supplier          String?
  stockQuantity     Int             @default(0)
  tenantId          String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdBy         String?
  updatedBy         String?
  deletedAt         DateTime?
  deletedBy         String?

  // Relationships
  templates         LabelTemplate[]

  @@index([size])
  @@index([isActive])
}

enum LabelType {
  QR
  BARCODE
  CUSTOM
  TEXT
}

enum LabelSizeType {
  SMALL
  STANDARD
  LARGE
  CUSTOM
}

enum TemplateComplexity {
  SIMPLE
  MEDIUM
  COMPLEX
}

enum LocationType {
  ROOM
  CABINET
  SHELF
  BOX
  BAG
  DRAWER
  RACK
  WALL_SHELF
  CONTAINER
  SHELF_COMPARTMENT
  SECTION
}

model Printer {
  id              String          @id @default(cuid())
  name            String          // User-defined name
  model           String          // Printer model (e.g., DYMO_LW_WIRELESS)
  brand           PrinterBrand    @default(DYMO)
  connectionType  ConnectionType  @default(NETWORK)
  ipAddress       String?         // For network printers
  port            String?         // Network port (default 9100)
  macAddress      String?         // MAC address for identification
  location        String?         // Physical location description
  description     String?         // Optional description
  isActive        Boolean         @default(true)
  isDefault       Boolean         @default(false)
  
  // Capabilities and settings
  maxWidth        Float?          // Maximum label width in inches
  resolution      Int?            // DPI resolution
  supportedMedia  String[]        // Supported label types as JSON array
  settings        Json?           // Printer-specific settings as JSON
  
  // Status and monitoring
  lastSeen        DateTime?       // Last successful connection
  paperLevel      Int?            // Paper level percentage (0-100)
  status          PrinterStatus   @default(UNKNOWN)
  
  // Relationships
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  printJobs       PrintJob[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([userId])
  @@index([brand])
  @@index([isActive])
}

model PrintJob {
  id            String        @id @default(cuid())
  title         String        // Job description
  type          PrintJobType  @default(LABEL)
  status        JobStatus     @default(PENDING)
  
  // Job data
  labelXml      String?       // DYMO label XML
  labelData     Json?         // Data for label fields
  settings      Json?         // Print settings (copies, etc.)
  
  // Relationships
  printerId     String
  printer       Printer       @relation(fields: [printerId], references: [id], onDelete: Cascade)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId        String?
  item          Item?         @relation(fields: [itemId], references: [id], onDelete: SetNull)
  locationId    String?
  location      Location?     @relation(fields: [locationId], references: [id], onDelete: SetNull)
  labelTemplate LabelTemplate? @relation("TemplatePrintJobs", fields: [labelTemplateId], references: [id], onDelete: SetNull)
  labelTemplateId String?
  
  // Timestamps
  queuedAt      DateTime      @default(now())
  startedAt     DateTime?
  completedAt   DateTime?
  errorMessage  String?
  
  @@index([userId])
  @@index([printerId])
  @@index([status])
}

enum PrinterBrand {
  DYMO
  ZEBRA
  BROTHER
  HP
  GENERIC
}

enum ConnectionType {
  USB
  NETWORK
  BLUETOOTH
}

enum PrinterStatus {
  ONLINE
  OFFLINE
  ERROR
  LOW_PAPER
  LOW_INK
  UNKNOWN
}

enum PrintJobType {
  LABEL
  QR_CODE
  BARCODE
  TEST
}

enum JobStatus {
  PENDING
  PRINTING
  COMPLETED
  FAILED
  CANCELLED
}

enum DistributionPurpose {
  STORAGE
  DISPLAY
  RESERVED
  WORK
}

enum ActivityType {
  ITEM_CREATED
  ITEM_UPDATED
  ITEM_MOVED
  ITEM_DELETED
  LOCATION_CREATED
  HOUSEHOLD_CREATED
  QR_SCANNED
  BULK_OPERATION
  LOAN_CREATED
  LOAN_RETURNED
}

enum HouseholdRole {
  ADMIN
  MEMBER
  READONLY
}

enum RelationType {
  MASTER_OF
  BATCH_OF
  REMNANT_OF
  RELATED_TO
  COLOR_OF
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum PatternDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum AttachmentType {
  RECEIPT
  WARRANTY
  MANUAL
  PHOTO
  CERTIFICATE
  INVOICE
  OTHER
}

enum LoanStatus {
  OUT
  RETURNED
  OVERDUE
}
